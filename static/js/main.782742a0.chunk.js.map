{"version":3,"sources":["serviceWorker.js","helpers/index.js","components/Marker/MapMarker.js","components/Marker/LocationMarker.js","components/WorldMap.js","redux/actions.js","components/ProjectionSelector.js","App.js","redux/reducers.js","index.js","redux/state.js"],"names":["Boolean","window","location","hostname","match","renderProjection","projection","longLat","currentLocationCoords","width","height","ratio","long","geoOrthographic","scale","translate","rotate","geoNaturalEarth1","geoAzimuthalEqualArea","geoHill","geoMercator","geoConicEqualArea","MapMarker","props","circleProps","currentLocation","onMouseOver","position","selectedProjection","svgSize","loaded","coords","geo","cx","cy","r","radius","fill","stroke","className","onMouseEnter","onMouseLeave","LocationMarker","state","popoverOpen","setPopover","setState","this","connectedSettings","index","circle","date","timestamp","dateRaw","Date","hours","getHours","toLocaleString","minimumIntegerDigits","useGrouping","minutes","getMinutes","seconds","getSeconds","parseDate","isOpen","content","style","borderRadius","backgroundColor","padding","fontSize","display","flexDirection","alignItems","justifyContent","margin","current","Component","WorldMap","getMapDimensions","innerWidth","innerHeight","setSize","addEventListener","getMap","loadCurrent","setInterval","removeEventListener","pastLocations","worldData","viewBox","map","d","i","divisibleBy","x","key","geoPath","strokeWidth","mapDispatchToProps","dispatch","fetch","then","response","status","json","type","value","feature","objects","countries","features","console","log","catch","err","error","size","fetchJsonp","ok","res","parseFloat","iss_position","longitude","latitude","connect","allProjections","changeProjection","buttonDivs","name","onChange","event","valueArray","target","split","App","top","left","maxWidth","href","rel","rootReducer","combineReducers","buttons","action","cities","flyover","inputLat","inputLong","unshift","middlewareEnhancer","applyMiddleware","thunkMiddleware","composedEnhancers","compose","store","createStore","desc","timezone","lat","country","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.782742a0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  geoConicEqualArea,\r\n  geoMercator,\r\n  geoNaturalEarth1,\r\n  geoAzimuthalEqualArea,\r\n  geoOrthographic\r\n} from 'd3-geo'\r\nimport { geoHill } from 'd3-geo-projection'\r\n\r\nexport const renderProjection = (\r\n  projection,\r\n  longLat,\r\n  { width, height },\r\n  currentLocationCoords\r\n) => {\r\n  const ratio = width > height ? height / 450 : width / 800\r\n\r\n  switch (projection) {\r\n    case 'geoOrthographic': {\r\n      const findRotationCoords = x => {\r\n        return [x * -1 || 0]\r\n      }\r\n      const long = currentLocationCoords\r\n        ? currentLocationCoords[0]\r\n        : longLat\r\n        ? longLat[0]\r\n        : 0\r\n      return geoOrthographic()\r\n        .scale(200 * ratio)\r\n        .translate([width / 2, height / 2])\r\n        .rotate(findRotationCoords(long))\r\n    }\r\n    case 'geoNaturalEarth1': {\r\n      return geoNaturalEarth1()\r\n        .scale(150 * ratio)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    case 'geoAzimuthalEqualArea': {\r\n      return geoAzimuthalEqualArea()\r\n        .scale(110 * ratio)\r\n        .translate([width / 2, height / 2])\r\n        .rotate([0, -90])\r\n    }\r\n    case 'geoHill': {\r\n      return geoHill()\r\n        .scale(150 * ratio)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    case 'geoMercator': {\r\n      return geoMercator()\r\n        .scale(75 * ratio)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    case 'geoConicEqualArea': {\r\n      return geoConicEqualArea()\r\n        .scale(125 * ratio)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    default: {\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\nexport const parseDate = timestamp => {\r\n  const dateRaw = new Date(timestamp * 1000)\r\n  return {\r\n    hours: dateRaw.getHours().toLocaleString('en-US', {\r\n      minimumIntegerDigits: 2,\r\n      useGrouping: false\r\n    }),\r\n    minutes: dateRaw.getMinutes().toLocaleString('en-US', {\r\n      minimumIntegerDigits: 2,\r\n      useGrouping: false\r\n    }),\r\n    seconds: dateRaw.getSeconds().toLocaleString('en-US', {\r\n      minimumIntegerDigits: 2,\r\n      useGrouping: false\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { renderProjection } from '../../helpers'\r\n\r\nconst MapMarker = props => {\r\n  const {\r\n    circleProps,\r\n    currentLocation,\r\n    onMouseOver,\r\n    position,\r\n    selectedProjection,\r\n    svgSize\r\n  } = props\r\n  if (position.loaded) {\r\n    const coords = renderProjection(\r\n      selectedProjection.geo,\r\n      position.longLat,\r\n      {\r\n        width: svgSize[0],\r\n        height: svgSize[1]\r\n      },\r\n      !!currentLocation && currentLocation.longLat\r\n    )\r\n    return (\r\n      <circle\r\n        cx={coords(position.longLat)[0]}\r\n        cy={coords(position.longLat)[1]}\r\n        r={circleProps.radius}\r\n        fill={circleProps.fill}\r\n        stroke={circleProps.stroke}\r\n        className='marker'\r\n        onMouseEnter={onMouseOver}\r\n        onMouseLeave={onMouseOver}\r\n      />\r\n    )\r\n  } else return null\r\n}\r\n\r\nexport default MapMarker\r\n","import React, { Component } from 'react'\r\nimport Popover from 'react-tiny-popover'\r\n\r\nimport MapMarker from './MapMarker'\r\nimport { parseDate } from '../../helpers'\r\n\r\nclass LocationMarker extends Component {\r\n  state = {\r\n    popoverOpen: false\r\n  }\r\n\r\n  setPopover = () => this.setState({ popoverOpen: !this.state.popoverOpen })\r\n\r\n  render() {\r\n    const { connectedSettings, index, location } = this.props\r\n\r\n    const isCurrent = index === 0\r\n\r\n    const opacity = () => {\r\n      if (index > 300) return 0.4\r\n      const calc = 1 - index / 500\r\n      return calc\r\n    }\r\n    const circle = !isCurrent\r\n      ? {\r\n          radius: 1,\r\n          fill: `rgba(255, 255, 255, ${opacity()})`\r\n        }\r\n      : {\r\n          radius: 5,\r\n          fill: 'rgba(50, 250, 250, .3)',\r\n          stroke: '#212121'\r\n        }\r\n    const date = parseDate(location.timestamp)\r\n\r\n    return (\r\n      <Popover\r\n        isOpen={this.state.popoverOpen}\r\n        content={\r\n          <div\r\n            style={{\r\n              borderRadius: '.5rem',\r\n              backgroundColor: 'rgba(250, 250, 250, .75)',\r\n              padding: '.25rem',\r\n              fontSize: '.75rem',\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              justifyContent: 'center'\r\n            }}\r\n          >\r\n            <p style={{ margin: '0' }}>\r\n              {`${location.longLat[0]} E, ${location.longLat[1]} N`}\r\n            </p>\r\n            <p style={{ margin: '0' }}>\r\n              {`${date.hours}:${date.minutes}:${date.seconds}`}\r\n            </p>\r\n          </div>\r\n        }\r\n      >\r\n        <MapMarker\r\n          circleProps={circle}\r\n          position={{ loaded: true, longLat: location.longLat }}\r\n          selectedProjection={connectedSettings.selectedProjection}\r\n          svgSize={connectedSettings.svgSize}\r\n          currentLocation={connectedSettings.current}\r\n          onMouseOver={this.setPopover}\r\n        />\r\n      </Popover>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LocationMarker\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { geoPath } from 'd3-geo'\r\n\r\nimport LocationMarker from './Marker/LocationMarker'\r\nimport { renderProjection } from '../helpers'\r\n\r\nimport { getMap, loadCurrent, setSize } from '../redux/actions'\r\n\r\nclass WorldMap extends Component {\r\n  state = {\r\n    height: 800,\r\n    width: 450\r\n  }\r\n\r\n  getMapDimensions = () => {\r\n    const { innerWidth, innerHeight } = window\r\n    let height, width\r\n    if (innerWidth > innerHeight) {\r\n      height = innerHeight * 0.9\r\n      width = height * 1.78\r\n    } else {\r\n      width = innerWidth * 0.9\r\n      height = width / 1.78\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        height,\r\n        width\r\n      },\r\n      () => this.props.setSize([width, height])\r\n    )\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMapDimensions()\r\n    window.addEventListener('resize', this.getMapDimensions)\r\n\r\n    this.props.getMap()\r\n    this.props.loadCurrent()\r\n    setInterval(this.props.loadCurrent, 5000)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.getMapDimensions)\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      current,\r\n      pastLocations,\r\n      selectedProjection,\r\n      svgSize,\r\n      worldData\r\n    } = this.props\r\n\r\n    const currentProjection = () => {\r\n      return renderProjection(selectedProjection.geo, current.longLat, {\r\n        width: svgSize[0],\r\n        height: svgSize[1]\r\n      })\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          width: '100%',\r\n          height: '100%',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center'\r\n        }}\r\n      >\r\n        <svg\r\n          width={svgSize[0]}\r\n          height={svgSize[1]}\r\n          viewBox={`0 0 ${svgSize[0]} ${svgSize[1]}`}\r\n        >\r\n          <g className='countries'>\r\n            {worldData.map((d, i) => {\r\n              const divisibleBy = x => {\r\n                return i % x === 0\r\n              }\r\n              const red = () => 250\r\n              const green = () => {\r\n                if (divisibleBy(2)) {\r\n                  if (divisibleBy(12)) {\r\n                    if (divisibleBy(9)) {\r\n                      if (divisibleBy(5)) {\r\n                        return 200\r\n                      }\r\n                      return 250\r\n                    }\r\n                    return 100\r\n                  }\r\n                  if (divisibleBy(10)) {\r\n                    return 255\r\n                  }\r\n                  if (divisibleBy(4)) {\r\n                    return 150 + i / 2\r\n                  }\r\n                  return 225 - i * 0.75\r\n                }\r\n                if (divisibleBy(5)) {\r\n                  return 170 + i / 3\r\n                }\r\n                if (divisibleBy(3)) {\r\n                  return i * 5\r\n                }\r\n                if (divisibleBy(7)) {\r\n                  return 70\r\n                }\r\n                return 150\r\n              }\r\n              const blue = () => {\r\n                if (divisibleBy(2)) {\r\n                  if (divisibleBy(3)) {\r\n                    return 200 - i / 2\r\n                  }\r\n                  if (divisibleBy(12)) {\r\n                    if (divisibleBy(9)) {\r\n                      return 100\r\n                    }\r\n                    return 50\r\n                  }\r\n                  if (divisibleBy(10)) {\r\n                    return 100\r\n                  }\r\n                  if (divisibleBy(4)) {\r\n                    return i + i / 2\r\n                  }\r\n                  return 30 + i\r\n                }\r\n                return 100 + i / 2\r\n              }\r\n\r\n              return (\r\n                <path\r\n                  key={`path_${i}`}\r\n                  d={geoPath().projection(currentProjection())(d)}\r\n                  className='country'\r\n                  fill={`rgb(${red()}, ${green()}, ${blue()})`}\r\n                  stroke='#212121'\r\n                  strokeWidth={0.5}\r\n                />\r\n              )\r\n            })}\r\n          </g>\r\n          <g className='markers'>\r\n            {pastLocations.map((location, i) => {\r\n              return (\r\n                <LocationMarker\r\n                  key={i}\r\n                  index={i}\r\n                  location={location}\r\n                  connectedSettings={{ current, selectedProjection, svgSize }}\r\n                />\r\n              )\r\n            })}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    current,\r\n    pastLocations,\r\n    selectedProjection,\r\n    svgSize,\r\n    worldData\r\n  } = state\r\n  return {\r\n    current,\r\n    pastLocations,\r\n    selectedProjection,\r\n    svgSize,\r\n    worldData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  getMap,\r\n  setSize,\r\n  loadCurrent\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(WorldMap)\r\n","import { feature } from 'topojson-client'\r\nimport fetchJsonp from 'fetch-jsonp'\r\n// import timeZoneConverter from 'time-zone-converter'\r\n// import timeZone from \"time-zone\"\r\n\r\nexport function getMap() {\r\n  return function(dispatch) {\r\n    fetch('https://unpkg.com/world-atlas@1/world/110m.json')\r\n      .then(response => {\r\n        if (response.status !== 200) {\r\n          console.log(`There was a problem: ${response.status}`)\r\n          return\r\n        }\r\n        response.json().then(worldData => {\r\n          dispatch(\r\n            mapLoaded(feature(worldData, worldData.objects.countries).features)\r\n          )\r\n        })\r\n      })\r\n      .catch(err => console.error('Caught error: ', err))\r\n  }\r\n}\r\n\r\nfunction mapLoaded(data) {\r\n  return {\r\n    type: 'MAP_LOADED',\r\n    value: data\r\n  }\r\n}\r\n\r\nexport function loadCurrent() {\r\n  return function(dispatch) {\r\n    fetchJsonp('http://api.open-notify.org/iss-now.json')\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          console.log('Response not OK.', response)\r\n          return\r\n        }\r\n        response.json().then(res => {\r\n          const current = {\r\n            loaded: true,\r\n            timestamp: res.timestamp,\r\n            longLat: [\r\n              parseFloat(res.iss_position.longitude),\r\n              parseFloat(res.iss_position.latitude)\r\n            ]\r\n          }\r\n          dispatch(currentLoaded(current))\r\n        })\r\n      })\r\n      .catch(err => console.error('Caught error: ', err))\r\n  }\r\n}\r\n\r\nfunction currentLoaded(coords) {\r\n  return {\r\n    type: 'CURRENT_LOADED',\r\n    value: coords\r\n  }\r\n}\r\n\r\nexport function changeProjection(projection) {\r\n  return {\r\n    type: 'PROJECTION_CHANGED',\r\n    value: projection\r\n  }\r\n}\r\n\r\nexport function setSize(size) {\r\n  return {\r\n    type: 'SIZE_LOADED',\r\n    value: size\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { changeProjection } from '../redux/actions'\r\n\r\nconst ProjectionSelector = props => {\r\n  const buttonDivs = props.allProjections.map((x, i) => {\r\n    return (\r\n      <option key={i} value={x.geo + ',' + x.name}>\r\n        {x.name} Projection\r\n      </option>\r\n    )\r\n  })\r\n  return (\r\n    <select\r\n      onChange={event => {\r\n        const valueArray = event.target.value.split(',')\r\n        return props.changeProjection({\r\n          geo: valueArray[0],\r\n          name: valueArray[1]\r\n        })\r\n      }}\r\n    >\r\n      {buttonDivs}\r\n    </select>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedProjection: state.selectedProjection,\r\n  allProjections: state.allProjections\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeProjection: projection => {\r\n    dispatch(changeProjection(projection))\r\n  }\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ProjectionSelector)\r\n","import React from 'react'\r\nimport WorldMap from './components/WorldMap'\r\nimport ProjectionSelector from './components/ProjectionSelector'\r\n\r\nfunction App() {\r\n  return (\r\n    <main style={{ width: '100vw', height: '100vh' }}>\r\n      <WorldMap />\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          top: '2rem',\r\n          left: '2rem'\r\n        }}\r\n      >\r\n        <h1 style={{ fontSize: '1.2rem' }}>\r\n          Things above the Earth: International&nbsp;Space&nbsp;Station\r\n        </h1>\r\n        <div style={{ maxWidth: '15rem' }}>\r\n          {/* <p\r\n            style={{\r\n              fontSize: '.8rem',\r\n              borderRadius: '.25rem',\r\n              border: '1px solid #f7322e',\r\n              backgroundColor: 'rgba(247, 50, 46, .25',\r\n              padding: '.25rem',\r\n              display: 'flex',\r\n              justifyContent: 'center'\r\n            }}\r\n          >\r\n            <span role='img' aria-label='construction sign'>\r\n              🚧\r\n            </span>\r\n            <code>&nbsp;app under construction!&nbsp;</code>\r\n            <span role='img' aria-label='construction sign'>\r\n              🚧\r\n            </span>\r\n          </p> */}\r\n          <p>\r\n            This map displays the current location of the International Space\r\n            Station in real time, thanks to&nbsp;\r\n            <a\r\n              href='http://open-notify.org/'\r\n              target='_blank'\r\n              rel='noopener noreferrer'\r\n            >\r\n              Open Notify\r\n            </a>\r\n            .\r\n          </p>\r\n          <p>\r\n            The location is updated every 5 seconds. Watch long enough and\r\n            you'll see the orbital path of the ISS drawn across the map! Try\r\n            viewing different projections to see how the path appears to change.\r\n          </p>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'column'\r\n            }}\r\n          >\r\n            <ProjectionSelector />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { combineReducers } from 'redux'\r\n\r\nfunction svgSize(state = [800, 450], action) {\r\n  if (action.type === 'SIZE_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction flyover(state = {}, action) {\r\n  if (action.type === 'FLYOVER_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction inputLat(state = '', action) {\r\n  if (action.type === 'LAT_UPDATED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction inputLong(state = '', action) {\r\n  if (action.type === 'LONG_UPDATED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction buttons(state = [], action) {\r\n  if (action.type === 'BUTTONS_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction worldData(state = [], action) {\r\n  if (action.type === 'MAP_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction current(state = {}, action) {\r\n  if (action.type === 'CURRENT_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction selectedProjection(state = {}, action) {\r\n  if (action.type === 'PROJECTION_CHANGED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction allProjections(state = []) {\r\n  return state\r\n}\r\n\r\nfunction cities(state = []) {\r\n  return state\r\n}\r\n\r\nfunction pastLocations(state = [], action) {\r\n  if (action.type === 'CURRENT_LOADED') {\r\n    state.unshift(action.value)\r\n  }\r\n  return state\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  allProjections,\r\n  buttons,\r\n  cities,\r\n  current,\r\n  flyover,\r\n  inputLat,\r\n  inputLong,\r\n  pastLocations,\r\n  selectedProjection,\r\n  svgSize,\r\n  worldData\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, createStore, compose } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport preloadedState from './redux/state'\nimport rootReducer from './redux/reducers'\n\nimport './index.css'\n\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\nconst composedEnhancers = compose(middlewareEnhancer)\n\nconst store = createStore(rootReducer, preloadedState, composedEnhancers)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\nserviceWorker.unregister()\n","export default {\r\n  current: {},\r\n  pastLocations: [],\r\n  worldData: [],\r\n  svgSize: [800, 450],\r\n  selectedProjection: {\r\n    geo: 'geoMercator',\r\n    name: 'Mercator',\r\n    desc: ''\r\n  },\r\n  allProjections: [\r\n    {\r\n      geo: 'geoMercator',\r\n      name: 'Mercator',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoNaturalEarth1',\r\n      name: 'Natural Earth',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoHill',\r\n      name: 'Hill Eucyclic',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoAzimuthalEqualArea',\r\n      name: 'Azimuthal',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoOrthographic',\r\n      name: 'Orthographic',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoConicEqualArea',\r\n      name: 'Conic',\r\n      desc: ''\r\n    }\r\n  ],\r\n  flyover: {},\r\n  inputLat: '',\r\n  inputLong: '',\r\n  buttons: [\r\n    {\r\n      name: 'São Paulo',\r\n      timezone: -2,\r\n      lat: -23.55,\r\n      long: -46.633333,\r\n      country: 'Brazil'\r\n    },\r\n    {\r\n      name: 'Lagos',\r\n      timezone: 1,\r\n      lat: 6.455027,\r\n      long: 3.384082,\r\n      country: 'Nigeria'\r\n    },\r\n    {\r\n      name: 'Dhaka',\r\n      timezone: 6,\r\n      lat: 23.7,\r\n      long: 90.366667,\r\n      country: 'Bangladesh'\r\n    },\r\n    {\r\n      name: 'Beijing',\r\n      timezone: 8,\r\n      lat: 39.916667,\r\n      long: 116.383333,\r\n      country: 'China'\r\n    },\r\n    {\r\n      name: 'New York',\r\n      timezone: -5,\r\n      lat: 40.7127,\r\n      long: -74.0059,\r\n      country: 'USA'\r\n    },\r\n    {\r\n      name: 'Moscow',\r\n      timezone: 3,\r\n      lat: 55.75,\r\n      long: 37.616667,\r\n      country: 'Russia'\r\n    }\r\n  ]\r\n}\r\n"],"sourceRoot":""}