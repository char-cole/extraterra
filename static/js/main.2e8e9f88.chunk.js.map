{"version":3,"sources":["serviceWorker.js","helpers/index.js","components/Marker/MapMarker.js","components/Marker/LocationMarker.js","components/WorldMap.js","redux/actions.js","components/ProjectionSelector.js","components/PlaceLookup.js","App.js","redux/reducers.js","index.js","redux/state.js"],"names":["Boolean","window","location","hostname","match","renderProjection","projection","longLat","currentLocationCoords","width","height","ratio","long","geoOrthographic","scale","translate","rotate","geoNaturalEarth1","geoAzimuthalEqualArea","geoHill","geoMercator","geoConicEqualArea","enforceTwoDigits","num","toLocaleString","minimumIntegerDigits","useGrouping","MapMarker","props","circleProps","currentLocation","onMouseOver","position","selectedProjection","svgSize","loaded","coords","geo","cx","cy","r","radius","fill","stroke","className","onMouseEnter","onMouseLeave","LocationMarker","state","popoverOpen","setPopover","setState","this","connectedSettings","index","circle","date","timestamp","dateRaw","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","parseDate","isOpen","content","style","borderRadius","backgroundColor","padding","fontSize","display","flexDirection","alignItems","justifyContent","margin","current","Component","WorldMap","getMapDimensions","innerWidth","innerHeight","setSize","addEventListener","getMap","loadCurrent","setInterval","removeEventListener","pastLocations","worldData","sortedWorldData","sort","a","b","Number","id","viewBox","map","d","i","divisibleBy","x","key","geoPath","strokeWidth","mapDispatchToProps","dispatch","fetch","then","response","status","json","type","value","feature","objects","countries","features","console","log","catch","err","error","size","fetchJsonp","ok","res","parseFloat","iss_position","longitude","latitude","connect","allProjections","changeProjection","buttonDivs","name","onChange","event","valueArray","target","split","PlaceLookup","onSubmit","handleSubmitPlaceLookup","handleUpdatePlace","placeLookupValue","popoverStyle","maxWidth","App","flyover","searchLocation","quality","flyoverInfoPopoverOpen","mapInfoPopoverOpen","projectionInfoPopoverOpen","timeTillFlyover","flyoverInterval","e","replace","clearInterval","preventDefault","jsonRes","topResult","results","Error","latLng","locations","providedLocation","lng","lat","geocodeQuality","flyoverRes","diff","risetime","getTime","bottom","left","href","rel","onClick","top","timeInSeconds","hr","Math","floor","min","s","parseTime","rootReducer","combineReducers","buttons","action","cities","inputLat","inputLong","unshift","middlewareEnhancer","applyMiddleware","thunkMiddleware","composedEnhancers","compose","store","createStore","desc","timezone","country","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e8e9f88.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  geoConicEqualArea,\r\n  geoMercator,\r\n  geoNaturalEarth1,\r\n  geoAzimuthalEqualArea,\r\n  geoOrthographic\r\n} from 'd3-geo'\r\nimport { geoHill } from 'd3-geo-projection'\r\n\r\nexport const renderProjection = (\r\n  projection,\r\n  longLat,\r\n  { width, height },\r\n  currentLocationCoords\r\n) => {\r\n  const ratio = width > height ? height / 450 : width / 800\r\n\r\n  switch (projection) {\r\n    case 'geoOrthographic': {\r\n      const findRotationCoords = x => {\r\n        return [x * -1 || 0]\r\n      }\r\n      const long = currentLocationCoords\r\n        ? currentLocationCoords[0]\r\n        : longLat\r\n        ? longLat[0]\r\n        : 0\r\n      return geoOrthographic()\r\n        .scale(200 * ratio)\r\n        .translate([width / 2, height / 2])\r\n        .rotate(findRotationCoords(long))\r\n    }\r\n    case 'geoNaturalEarth1': {\r\n      return geoNaturalEarth1()\r\n        .scale(150 * ratio)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    case 'geoAzimuthalEqualArea': {\r\n      return geoAzimuthalEqualArea()\r\n        .scale(110 * ratio)\r\n        .translate([width / 2, height / 2])\r\n        .rotate([0, -90])\r\n    }\r\n    case 'geoHill': {\r\n      return geoHill()\r\n        .scale(150 * ratio)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    case 'geoMercator': {\r\n      return geoMercator()\r\n        .scale(75 * ratio)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    case 'geoConicEqualArea': {\r\n      return geoConicEqualArea()\r\n        .scale(125 * ratio)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    default: {\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\nconst enforceTwoDigits = num => {\r\n  return num.toLocaleString('en-US', {\r\n    minimumIntegerDigits: 2,\r\n    useGrouping: false\r\n  })\r\n}\r\n\r\nexport const parseDate = timestamp => {\r\n  const dateRaw = new Date(timestamp)\r\n  return {\r\n    hours: enforceTwoDigits(dateRaw.getHours()),\r\n    minutes: enforceTwoDigits(dateRaw.getMinutes()),\r\n    seconds: enforceTwoDigits(dateRaw.getSeconds())\r\n  }\r\n}\r\n\r\nexport const parseTime = timeInSeconds => {\r\n  const hr = Math.floor(timeInSeconds / 3600)\r\n  const min = Math.floor(timeInSeconds / 60 - hr * 60)\r\n  const s = Math.floor(timeInSeconds - hr * 3600 - min * 60)\r\n  return `${hr}:${enforceTwoDigits(min)}:${enforceTwoDigits(s)}`\r\n}\r\n","import React from 'react'\r\nimport { renderProjection } from '../../helpers'\r\n\r\nconst MapMarker = props => {\r\n  const {\r\n    circleProps,\r\n    currentLocation,\r\n    onMouseOver,\r\n    position,\r\n    selectedProjection,\r\n    svgSize\r\n  } = props\r\n  if (position.loaded) {\r\n    const coords = renderProjection(\r\n      selectedProjection.geo,\r\n      position.longLat,\r\n      {\r\n        width: svgSize[0],\r\n        height: svgSize[1]\r\n      },\r\n      !!currentLocation && currentLocation.longLat\r\n    )\r\n    return (\r\n      <circle\r\n        cx={coords(position.longLat)[0]}\r\n        cy={coords(position.longLat)[1]}\r\n        r={circleProps.radius}\r\n        fill={circleProps.fill}\r\n        stroke={circleProps.stroke}\r\n        className='marker'\r\n        onMouseEnter={onMouseOver}\r\n        onMouseLeave={onMouseOver}\r\n      />\r\n    )\r\n  } else return null\r\n}\r\n\r\nexport default MapMarker\r\n","import React, { Component } from 'react'\r\nimport Popover from 'react-tiny-popover'\r\n\r\nimport MapMarker from './MapMarker'\r\nimport { parseDate } from '../../helpers'\r\n\r\nclass LocationMarker extends Component {\r\n  state = {\r\n    popoverOpen: false\r\n  }\r\n\r\n  setPopover = () => this.setState({ popoverOpen: !this.state.popoverOpen })\r\n\r\n  render() {\r\n    const { connectedSettings, index, location } = this.props\r\n\r\n    const isCurrent = index === 0\r\n\r\n    const opacity = () => {\r\n      if (index > 300) return 0.4\r\n      const calc = 1 - index / 500\r\n      return calc\r\n    }\r\n    const circle = !isCurrent\r\n      ? {\r\n          radius: 1,\r\n          fill: `rgba(255, 255, 255, ${opacity()})`\r\n        }\r\n      : {\r\n          radius: 5,\r\n          fill: 'rgba(75, 250, 250, .5)',\r\n          stroke: '#fff'\r\n        }\r\n    const date = parseDate(location.timestamp * 1000)\r\n\r\n    return (\r\n      <Popover\r\n        isOpen={this.state.popoverOpen}\r\n        content={\r\n          <div\r\n            style={{\r\n              borderRadius: '.5rem',\r\n              backgroundColor: 'rgba(250, 250, 250, .75)',\r\n              padding: '.25rem',\r\n              fontSize: '.75rem',\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              justifyContent: 'center'\r\n            }}\r\n          >\r\n            <p style={{ margin: '0' }}>\r\n              {`${location.longLat[0]} E, ${location.longLat[1]} N`}\r\n            </p>\r\n            <p style={{ margin: '0' }}>\r\n              {`${date.hours}:${date.minutes}:${date.seconds}`}\r\n            </p>\r\n          </div>\r\n        }\r\n      >\r\n        <MapMarker\r\n          circleProps={circle}\r\n          position={{ loaded: true, longLat: location.longLat }}\r\n          selectedProjection={connectedSettings.selectedProjection}\r\n          svgSize={connectedSettings.svgSize}\r\n          currentLocation={connectedSettings.current}\r\n          onMouseOver={this.setPopover}\r\n        />\r\n      </Popover>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LocationMarker\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { geoPath } from 'd3-geo'\r\n\r\nimport LocationMarker from './Marker/LocationMarker'\r\nimport { renderProjection } from '../helpers'\r\n\r\nimport { getMap, loadCurrent, setSize } from '../redux/actions'\r\n\r\nclass WorldMap extends Component {\r\n  state = {\r\n    height: 800,\r\n    width: 450\r\n  }\r\n\r\n  getMapDimensions = () => {\r\n    const { innerWidth, innerHeight } = window\r\n    let height, width\r\n    if (innerWidth > innerHeight) {\r\n      height = innerHeight * 0.9\r\n      width = height * 1.78\r\n    } else {\r\n      width = innerWidth * 0.9\r\n      height = width / 1.78\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        height,\r\n        width\r\n      },\r\n      () => this.props.setSize([width, height])\r\n    )\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMapDimensions()\r\n    window.addEventListener('resize', this.getMapDimensions)\r\n\r\n    this.props.getMap()\r\n    this.props.loadCurrent()\r\n    setInterval(this.props.loadCurrent, 5000)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.getMapDimensions)\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      current,\r\n      pastLocations,\r\n      selectedProjection,\r\n      svgSize,\r\n      worldData\r\n    } = this.props\r\n\r\n    const currentProjection = () => {\r\n      return renderProjection(selectedProjection.geo, current.longLat, {\r\n        width: svgSize[0],\r\n        height: svgSize[1]\r\n      })\r\n    }\r\n\r\n    const sortedWorldData = worldData.sort(\r\n      (a, b) => Number(a.id) - Number(b.id)\r\n    )\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          width: '100%',\r\n          height: '100%',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center'\r\n        }}\r\n      >\r\n        <svg\r\n          width={svgSize[0]}\r\n          height={svgSize[1]}\r\n          viewBox={`0 0 ${svgSize[0]} ${svgSize[1]}`}\r\n        >\r\n          <g className='countries'>\r\n            {sortedWorldData.map((d, i) => {\r\n              const divisibleBy = x => {\r\n                return i % x === 0\r\n              }\r\n              const findFillColor = () => {\r\n                if (i === 5) return '200, 200, 200' // antarctica\r\n                if (divisibleBy(3)) return `250, ${120 + i / 3}, ${100 + i / 4}` // red\r\n                if (divisibleBy(2)) return `250, ${175 + i / 4}, ${100 + i / 2}` // orange\r\n                return `250, 225, ${100 + i / 3}` // yella\r\n              }\r\n\r\n              return (\r\n                <path\r\n                  key={`path_${i}`}\r\n                  d={geoPath().projection(currentProjection())(d)}\r\n                  className='country'\r\n                  id={`id_${d.id}_${i}`}\r\n                  fill={`rgb(${findFillColor()})`}\r\n                  stroke='#212121'\r\n                  strokeWidth={0.5}\r\n                />\r\n              )\r\n            })}\r\n          </g>\r\n          <g className='markers'>\r\n            {pastLocations.map((location, i) => {\r\n              return (\r\n                <LocationMarker\r\n                  key={i}\r\n                  index={i}\r\n                  location={location}\r\n                  connectedSettings={{ current, selectedProjection, svgSize }}\r\n                />\r\n              )\r\n            })}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    current,\r\n    pastLocations,\r\n    selectedProjection,\r\n    svgSize,\r\n    worldData\r\n  } = state\r\n  return {\r\n    current,\r\n    pastLocations,\r\n    selectedProjection,\r\n    svgSize,\r\n    worldData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  getMap,\r\n  setSize,\r\n  loadCurrent\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(WorldMap)\r\n","import { feature } from 'topojson-client'\r\nimport fetchJsonp from 'fetch-jsonp'\r\n// import timeZoneConverter from 'time-zone-converter'\r\n// import timeZone from \"time-zone\"\r\n\r\nexport function getMap() {\r\n  return function(dispatch) {\r\n    fetch('https://unpkg.com/world-atlas@1/world/110m.json')\r\n      .then(response => {\r\n        if (response.status !== 200) {\r\n          console.log(`There was a problem: ${response.status}`)\r\n          return\r\n        }\r\n        response.json().then(worldData => {\r\n          dispatch(\r\n            mapLoaded(feature(worldData, worldData.objects.countries).features)\r\n          )\r\n        })\r\n      })\r\n      .catch(err => console.error('Caught error: ', err))\r\n  }\r\n}\r\n\r\nfunction mapLoaded(data) {\r\n  return {\r\n    type: 'MAP_LOADED',\r\n    value: data\r\n  }\r\n}\r\n\r\nexport function loadCurrent() {\r\n  return function(dispatch) {\r\n    fetchJsonp('http://api.open-notify.org/iss-now.json')\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          console.log('Response not OK.', response)\r\n          return\r\n        }\r\n        response.json().then(res => {\r\n          const current = {\r\n            loaded: true,\r\n            timestamp: res.timestamp,\r\n            longLat: [\r\n              parseFloat(res.iss_position.longitude),\r\n              parseFloat(res.iss_position.latitude)\r\n            ]\r\n          }\r\n          dispatch(currentLoaded(current))\r\n        })\r\n      })\r\n      .catch(err => console.error('Caught error: ', err))\r\n  }\r\n}\r\n\r\nfunction currentLoaded(coords) {\r\n  return {\r\n    type: 'CURRENT_LOADED',\r\n    value: coords\r\n  }\r\n}\r\n\r\nexport function changeProjection(projection) {\r\n  return {\r\n    type: 'PROJECTION_CHANGED',\r\n    value: projection\r\n  }\r\n}\r\n\r\nexport function setSize(size) {\r\n  return {\r\n    type: 'SIZE_LOADED',\r\n    value: size\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { changeProjection } from '../redux/actions'\r\n\r\nconst ProjectionSelector = props => {\r\n  const buttonDivs = props.allProjections.map((x, i) => {\r\n    return (\r\n      <option key={i} value={x.geo + ',' + x.name}>\r\n        {x.name} Projection\r\n      </option>\r\n    )\r\n  })\r\n  return (\r\n    <select\r\n      onChange={event => {\r\n        const valueArray = event.target.value.split(',')\r\n        return props.changeProjection({\r\n          geo: valueArray[0],\r\n          name: valueArray[1]\r\n        })\r\n      }}\r\n    >\r\n      {buttonDivs}\r\n    </select>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedProjection: state.selectedProjection,\r\n  allProjections: state.allProjections\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeProjection: projection => {\r\n    dispatch(changeProjection(projection))\r\n  }\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ProjectionSelector)\r\n","import React from 'react'\r\n\r\nconst PlaceLookup = props => {\r\n  return (\r\n    <form onSubmit={props.handleSubmitPlaceLookup}>\r\n      <input\r\n        type='text'\r\n        onChange={props.handleUpdatePlace}\r\n        value={props.placeLookupValue}\r\n      />\r\n      <input type='submit' value='search' />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PlaceLookup\r\n","import React, { Component } from 'react'\r\nimport fetchJsonp from 'fetch-jsonp'\r\nimport Popover from 'react-tiny-popover'\r\n\r\nimport WorldMap from './components/WorldMap'\r\nimport ProjectionSelector from './components/ProjectionSelector'\r\nimport PlaceLookup from './components/PlaceLookup'\r\n\r\nimport { parseTime } from './helpers'\r\n\r\nconst popoverStyle = {\r\n  maxWidth: '20rem',\r\n  backgroundColor: 'rgba(250, 250, 250, .95)',\r\n  borderRadius: '.5rem',\r\n  padding: '.5rem'\r\n}\r\n\r\nclass App extends Component {\r\n  state = {\r\n    flyover: {\r\n      searchLocation: '',\r\n      longLat: [],\r\n      quality: ''\r\n    },\r\n    flyoverInfoPopoverOpen: false,\r\n    mapInfoPopoverOpen: false,\r\n    placeLookupValue: '',\r\n    projectionInfoPopoverOpen: false,\r\n    timeTillFlyover: null\r\n  }\r\n\r\n  flyoverInterval = null\r\n\r\n  handleSubmitPlaceLookup = async e => {\r\n    const value = this.state.placeLookupValue.replace(/\\s/g, '')\r\n    clearInterval(this.flyoverInterval)\r\n    e.preventDefault()\r\n    fetch(\r\n      `http://www.mapquestapi.com/geocoding/v1/address?key=1F9kTAodCTAGnxoK4dmLAwOQ79tcZGe3&location=${value}&thumbMaps=false&maxResults=1`\r\n    ).then(response => {\r\n      if (response.status !== 200) {\r\n        console.log(`There was a problem: ${response.status}`)\r\n        return\r\n      }\r\n      response.json().then(async jsonRes => {\r\n        const topResult = jsonRes.results[0]\r\n        if (!topResult) throw new Error('Could not find location')\r\n        const latLng = topResult.locations[0].latLng\r\n        this.setState({\r\n          flyover: {\r\n            searchLocation: topResult.providedLocation.location,\r\n            longLat: [latLng.lng, latLng.lat],\r\n            quality: topResult.locations[0].geocodeQuality\r\n          }\r\n        })\r\n        await fetchJsonp(\r\n          `http://api.open-notify.org/iss-pass.json?lat=${latLng.lat}&lon=${latLng.lng}&n=1`\r\n        )\r\n          .then(flyoverRes => {\r\n            if (!flyoverRes.ok) {\r\n              console.log('Response not OK')\r\n              return\r\n            }\r\n            flyoverRes.json().then(flyover => {\r\n              const rise = flyover.response[0].risetime * 1000\r\n              const now = new Date().getTime()\r\n              const diff = (rise - now) / 1000\r\n              this.setState(\r\n                {\r\n                  timeTillFlyover: diff\r\n                },\r\n                () => {\r\n                  if (this.state.timeTillFlyover) {\r\n                    this.flyoverInterval = setInterval(() => {\r\n                      this.setState({\r\n                        timeTillFlyover: this.state.timeTillFlyover - 1\r\n                      })\r\n                    }, 1000)\r\n                  }\r\n                }\r\n              )\r\n            })\r\n          })\r\n          .catch(err => console.error('Caught error: ', err))\r\n      })\r\n    })\r\n  }\r\n  handleUpdatePlace = e => {\r\n    this.setState({ placeLookupValue: e.target.value })\r\n  }\r\n  render() {\r\n    const {\r\n      flyover,\r\n      flyoverInfoPopoverOpen,\r\n      mapInfoPopoverOpen,\r\n      placeLookupValue,\r\n      projectionInfoPopoverOpen,\r\n      timeTillFlyover\r\n    } = this.state\r\n    return (\r\n      <main style={{ width: '100vw', height: '100vh' }}>\r\n        <WorldMap />\r\n        <div style={{ position: 'absolute', bottom: '1rem', left: '1rem' }}>\r\n          <Popover\r\n            isOpen={mapInfoPopoverOpen}\r\n            content={\r\n              <div style={popoverStyle}>\r\n                <p>\r\n                  This map displays the current location of the International\r\n                  Space Station in real time, thanks to&nbsp;\r\n                  <a\r\n                    href='http://open-notify.org/'\r\n                    target='_blank'\r\n                    rel='noopener noreferrer'\r\n                  >\r\n                    Open Notify\r\n                  </a>\r\n                  .\r\n                </p>\r\n                <p>\r\n                  The location is updated every 5 seconds. Watch long enough and\r\n                  you'll see the orbital path of the ISS drawn across the map!\r\n                  Try viewing different projections to see how the path appears\r\n                  to change.\r\n                </p>\r\n              </div>\r\n            }\r\n          >\r\n            <button\r\n              className='help-button'\r\n              onClick={() => {\r\n                this.setState({\r\n                  mapInfoPopoverOpen: !mapInfoPopoverOpen\r\n                })\r\n              }}\r\n            >\r\n              ?\r\n            </button>\r\n          </Popover>\r\n        </div>\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: '1rem',\r\n            left: '1rem'\r\n          }}\r\n        >\r\n          <h1 style={{ fontSize: '1.2rem' }}>\r\n            Things above the Earth: International&nbsp;Space&nbsp;Station\r\n          </h1>\r\n          <div style={{ display: 'block' }}>\r\n            <h5>View the Earth in different projections:</h5>\r\n            <ProjectionSelector />\r\n            <Popover\r\n              isOpen={projectionInfoPopoverOpen}\r\n              content={\r\n                <div style={popoverStyle}>\r\n                  <p>\r\n                    <b>What are projections?</b> Because the Earth is a\r\n                    three-dimensional sphere, we aren't able to view all of it\r\n                    at once. A projection is way of mapping every point on a\r\n                    sphere (like the Earth) onto a point on a two-dimensional\r\n                    plane - in other words, a flat surface such as a screen.\r\n                  </p>\r\n                  <p>\r\n                    Each projection uses a different mathematical formula to\r\n                    determine its shape, and each has different uses. The\r\n                    Orthographic Projection is actually designed to look just\r\n                    like half of a sphere, and looks as Earth would from space,\r\n                    directly over the equator. Notice how each projection\r\n                    distorts distance or direction differently.\r\n                  </p>\r\n                </div>\r\n              }\r\n            >\r\n              <button\r\n                className='help-button'\r\n                onClick={() => {\r\n                  this.setState({\r\n                    projectionInfoPopoverOpen: !projectionInfoPopoverOpen\r\n                  })\r\n                }}\r\n              >\r\n                ?\r\n              </button>\r\n            </Popover>\r\n          </div>\r\n          <div style={{ display: 'block' }}>\r\n            <h5>Find out when the ISS will fly over you:</h5>\r\n            <PlaceLookup\r\n              handleSubmitPlaceLookup={this.handleSubmitPlaceLookup}\r\n              handleUpdatePlace={this.handleUpdatePlace}\r\n              placeLookupValue={placeLookupValue}\r\n            />\r\n            <Popover\r\n              isOpen={flyoverInfoPopoverOpen}\r\n              content={\r\n                <div style={popoverStyle}>\r\n                  <p>\r\n                    Search for any location by name or by street address. This\r\n                    app will use MapQuest's GeoCoding API to look up the\r\n                    latitude and longitude of your location and then use Open\r\n                    Notify to find out when the ISS will be overhead next.\r\n                  </p>\r\n                  <p>\r\n                    If it's a clear night when the ISS is overhead, you may be\r\n                    able to go outside and see it! The ISS will appear as a\r\n                    bright light moving rapidly across the sky.\r\n                  </p>\r\n                </div>\r\n              }\r\n            >\r\n              <button\r\n                className='help-button'\r\n                onClick={() => {\r\n                  this.setState({\r\n                    flyoverInfoPopoverOpen: !flyoverInfoPopoverOpen\r\n                  })\r\n                }}\r\n              >\r\n                ?\r\n              </button>\r\n            </Popover>\r\n            {timeTillFlyover !== null && (\r\n              <p>\r\n                The ISS will be overhead at {flyover.searchLocation} in&nbsp;\r\n                {parseTime(timeTillFlyover)}\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import { combineReducers } from 'redux'\r\n\r\nfunction svgSize(state = [800, 450], action) {\r\n  if (action.type === 'SIZE_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction flyover(state = {}, action) {\r\n  if (action.type === 'FLYOVER_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction inputLat(state = '', action) {\r\n  if (action.type === 'LAT_UPDATED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction inputLong(state = '', action) {\r\n  if (action.type === 'LONG_UPDATED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction buttons(state = [], action) {\r\n  if (action.type === 'BUTTONS_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction worldData(state = [], action) {\r\n  if (action.type === 'MAP_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction current(state = {}, action) {\r\n  if (action.type === 'CURRENT_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction selectedProjection(state = {}, action) {\r\n  if (action.type === 'PROJECTION_CHANGED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction allProjections(state = []) {\r\n  return state\r\n}\r\n\r\nfunction cities(state = []) {\r\n  return state\r\n}\r\n\r\nfunction pastLocations(state = [], action) {\r\n  if (action.type === 'CURRENT_LOADED') {\r\n    state.unshift(action.value)\r\n  }\r\n  return state\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  allProjections,\r\n  buttons,\r\n  cities,\r\n  current,\r\n  flyover,\r\n  inputLat,\r\n  inputLong,\r\n  pastLocations,\r\n  selectedProjection,\r\n  svgSize,\r\n  worldData\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, createStore, compose } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport preloadedState from './redux/state'\nimport rootReducer from './redux/reducers'\n\nimport './index.css'\n\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\nconst composedEnhancers = compose(middlewareEnhancer)\n\nconst store = createStore(rootReducer, preloadedState, composedEnhancers)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\nserviceWorker.unregister()\n","export default {\r\n  current: {},\r\n  pastLocations: [],\r\n  worldData: [],\r\n  svgSize: [800, 450],\r\n  selectedProjection: {\r\n    geo: 'geoOrthographic',\r\n    name: 'Orthographic',\r\n    desc: ''\r\n  },\r\n  allProjections: [\r\n    {\r\n      geo: 'geoOrthographic',\r\n      name: 'Orthographic',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoMercator',\r\n      name: 'Mercator',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoNaturalEarth1',\r\n      name: 'Natural Earth',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoHill',\r\n      name: 'Hill Eucyclic',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoAzimuthalEqualArea',\r\n      name: 'Azimuthal',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoConicEqualArea',\r\n      name: 'Conic',\r\n      desc: ''\r\n    }\r\n  ],\r\n  flyover: {},\r\n  inputLat: '',\r\n  inputLong: '',\r\n  buttons: [\r\n    {\r\n      name: 'São Paulo',\r\n      timezone: -2,\r\n      lat: -23.55,\r\n      long: -46.633333,\r\n      country: 'Brazil'\r\n    },\r\n    {\r\n      name: 'Lagos',\r\n      timezone: 1,\r\n      lat: 6.455027,\r\n      long: 3.384082,\r\n      country: 'Nigeria'\r\n    },\r\n    {\r\n      name: 'Dhaka',\r\n      timezone: 6,\r\n      lat: 23.7,\r\n      long: 90.366667,\r\n      country: 'Bangladesh'\r\n    },\r\n    {\r\n      name: 'Beijing',\r\n      timezone: 8,\r\n      lat: 39.916667,\r\n      long: 116.383333,\r\n      country: 'China'\r\n    },\r\n    {\r\n      name: 'New York',\r\n      timezone: -5,\r\n      lat: 40.7127,\r\n      long: -74.0059,\r\n      country: 'USA'\r\n    },\r\n    {\r\n      name: 'Moscow',\r\n      timezone: 3,\r\n      lat: 55.75,\r\n      long: 37.616667,\r\n      country: 'Russia'\r\n    }\r\n  ]\r\n}\r\n"],"sourceRoot":""}