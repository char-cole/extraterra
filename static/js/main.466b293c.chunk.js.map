{"version":3,"sources":["serviceWorker.js","helpers/index.js","components/Marker/MapMarker.js","components/Marker/StationPositionMarker.js","components/Marker/PastLocationMarker.js","components/WorldMap.js","redux/actions.js","components/ProjectionSelector.js","App.js","redux/reducers.js","index.js","redux/state.js"],"names":["Boolean","window","location","hostname","match","renderProjection","projection","longLat","currentLocationCoords","width","height","long","geoOrthographic","scale","translate","rotate","geoNaturalEarth1","geoAzimuthalEqualArea","geoHill","geoMercator","geoConicEqualArea","MapMarker","props","circleProps","currentLocation","position","selectedProjection","svgSize","loaded","coords","geo","cx","cy","r","radius","fill","stroke","className","StationMarker","connectedSettings","current","PastLocationMarker","i","circle","fraction","final","console","log","opacity","WorldMap","innerHeight","calcWidth","this","setSize","getMap","loadCurrent","setInterval","pastLocations","worldData","style","display","justifyContent","alignItems","viewBox","map","d","divisibleBy","x","key","geoPath","strokeWidth","StationPositionMarker","Component","mapDispatchToProps","dispatch","fetch","then","response","status","json","type","value","feature","objects","countries","features","catch","err","error","size","fetchJsonp","ok","res","parseFloat","iss_position","longitude","latitude","connect","state","allProjections","changeProjection","buttonDivs","name","onChange","event","valueArray","target","split","App","top","left","fontSize","maxWidth","borderRadius","border","backgroundColor","padding","role","aria-label","href","rel","flexDirection","rootReducer","combineReducers","buttons","action","cities","flyover","inputLat","inputLong","unshift","middlewareEnhancer","applyMiddleware","thunkMiddleware","composedEnhancers","compose","store","createStore","desc","timezone","lat","country","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.466b293c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  geoConicEqualArea,\r\n  geoMercator,\r\n  geoNaturalEarth1,\r\n  geoAzimuthalEqualArea,\r\n  geoOrthographic\r\n} from 'd3-geo'\r\nimport { geoHill } from 'd3-geo-projection'\r\n\r\nexport const renderProjection = (\r\n  projection,\r\n  longLat,\r\n  { width, height },\r\n  currentLocationCoords\r\n) => {\r\n  switch (projection) {\r\n    case 'geoOrthographic': {\r\n      const findRotationCoords = x => {\r\n        return [x * -1 || 0]\r\n      }\r\n      const long = currentLocationCoords\r\n        ? currentLocationCoords[0]\r\n        : longLat\r\n        ? longLat[0]\r\n        : 0\r\n      return geoOrthographic()\r\n        .scale(200)\r\n        .translate([width / 2, height / 2])\r\n        .rotate(findRotationCoords(long))\r\n    }\r\n    case 'geoNaturalEarth1': {\r\n      return geoNaturalEarth1()\r\n        .scale(150)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    case 'geoAzimuthalEqualArea': {\r\n      return geoAzimuthalEqualArea()\r\n        .scale(110)\r\n        .translate([width / 2, height / 2])\r\n        .rotate([0, -90])\r\n    }\r\n    case 'geoHill': {\r\n      return geoHill()\r\n        .scale(150)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    case 'geoMercator': {\r\n      return geoMercator()\r\n        .scale(75)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    case 'geoConicEqualArea': {\r\n      return geoConicEqualArea()\r\n        .scale(125)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    default: {\r\n      return null\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { renderProjection } from '../../helpers'\r\n\r\nconst MapMarker = props => {\r\n  const {\r\n    circleProps,\r\n    currentLocation,\r\n    position,\r\n    selectedProjection,\r\n    svgSize\r\n  } = props\r\n  if (position.loaded) {\r\n    const coords = renderProjection(\r\n      selectedProjection.geo,\r\n      position.longLat,\r\n      {\r\n        width: svgSize[0],\r\n        height: svgSize[1]\r\n      },\r\n      !!currentLocation && currentLocation.longLat\r\n    )\r\n    return (\r\n      <circle\r\n        cx={coords(position.longLat)[0]}\r\n        cy={coords(position.longLat)[1]}\r\n        r={circleProps.radius}\r\n        fill={circleProps.fill}\r\n        stroke={circleProps.stroke}\r\n        className='marker'\r\n      />\r\n    )\r\n  } else return null\r\n}\r\n\r\nexport default MapMarker\r\n","import React from 'react'\r\nimport MapMarker from './MapMarker'\r\n\r\nconst StationMarker = props => {\r\n  const { current, selectedProjection, svgSize } = props.connectedSettings\r\n  const circle = {\r\n    radius: 5,\r\n    fill: 'rgba(50, 250, 250, .3)',\r\n    stroke: '#212121'\r\n  }\r\n  return (\r\n    <MapMarker\r\n      circleProps={circle}\r\n      position={current}\r\n      selectedProjection={selectedProjection}\r\n      svgSize={svgSize}\r\n    />\r\n  )\r\n}\r\n\r\nexport default StationMarker\r\n","import React from 'react'\r\nimport MapMarker from './MapMarker'\r\n\r\nconst PastLocationMarker = props => {\r\n  const { connectedSettings, i, longLat } = props\r\n  const opacity = () => {\r\n    const fraction = i / 10\r\n    const final = fraction > 1 ? fraction : 1\r\n    console.log('opacity', i, 1 / final)\r\n    return 1 / final\r\n  }\r\n  const circle = {\r\n    radius: 1,\r\n    fill: `rgba(200, 250, 250, ${opacity()})`\r\n  }\r\n  return (\r\n    <MapMarker\r\n      circleProps={circle}\r\n      position={{ loaded: true, longLat }}\r\n      selectedProjection={connectedSettings.selectedProjection}\r\n      svgSize={connectedSettings.svgSize}\r\n      currentLocation={connectedSettings.current}\r\n    />\r\n  )\r\n}\r\n\r\nexport default PastLocationMarker\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { geoPath } from 'd3-geo'\r\n\r\nimport StationPositionMarker from './Marker/StationPositionMarker'\r\nimport PastLocationMarker from './Marker/PastLocationMarker'\r\nimport { renderProjection } from '../helpers'\r\n\r\nimport { getMap, loadCurrent, setSize } from '../redux/actions'\r\n\r\nclass WorldMap extends Component {\r\n  height = window.innerHeight * 0.8\r\n  calcWidth = this.height * 1.78\r\n  // maxInnerWidth = window.innerWidth * .95\r\n  // width = this.calcWidth < this.maxInnerWidth ? this.calcWidth : this.maxInnerWidth\r\n  width = this.calcWidth\r\n\r\n  componentDidMount() {\r\n    this.props.setSize([this.width, this.height])\r\n    this.props.getMap()\r\n    this.props.loadCurrent()\r\n    setInterval(this.props.loadCurrent, 5000)\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      current,\r\n      pastLocations,\r\n      selectedProjection,\r\n      svgSize,\r\n      worldData\r\n    } = this.props\r\n\r\n    const currentProjection = () =>\r\n      renderProjection(selectedProjection.geo, current.longLat, {\r\n        width: svgSize[0],\r\n        height: svgSize[1]\r\n      })\r\n    return (\r\n      <div\r\n        style={{\r\n          width: '100%',\r\n          height: '100%',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center'\r\n        }}\r\n      >\r\n        <svg\r\n          width={svgSize[0]}\r\n          height={svgSize[1]}\r\n          viewBox={`0 0 ${svgSize[0]} ${svgSize[1]}`}\r\n        >\r\n          <g className='countries'>\r\n            {worldData.map((d, i) => {\r\n              const divisibleBy = x => {\r\n                return i % x === 0\r\n              }\r\n              const red = () => 250\r\n              const green = () => {\r\n                if (divisibleBy(2)) {\r\n                  if (divisibleBy(12)) {\r\n                    if (divisibleBy(9)) {\r\n                      if (divisibleBy(5)) {\r\n                        return 200\r\n                      }\r\n                      return 250\r\n                    }\r\n                    return 100\r\n                  }\r\n                  if (divisibleBy(10)) {\r\n                    return 255\r\n                  }\r\n                  if (divisibleBy(4)) {\r\n                    return 150 + i / 2\r\n                  }\r\n                  return 225 - i * 0.75\r\n                }\r\n                if (divisibleBy(5)) {\r\n                  return 170 + i / 3\r\n                }\r\n                if (divisibleBy(3)) {\r\n                  return i * 5\r\n                }\r\n                if (divisibleBy(7)) {\r\n                  return 70\r\n                }\r\n                return 150\r\n              }\r\n              const blue = () => {\r\n                if (divisibleBy(2)) {\r\n                  if (divisibleBy(3)) {\r\n                    return 200 - i / 2\r\n                  }\r\n                  if (divisibleBy(12)) {\r\n                    if (divisibleBy(9)) {\r\n                      return 100\r\n                    }\r\n                    return 50\r\n                  }\r\n                  if (divisibleBy(10)) {\r\n                    return 100\r\n                  }\r\n                  if (divisibleBy(4)) {\r\n                    return i + i / 2\r\n                  }\r\n                  return 30 + i\r\n                }\r\n                return 100 + i / 2\r\n              }\r\n\r\n              return (\r\n                <path\r\n                  key={`path_${i}`}\r\n                  d={geoPath().projection(currentProjection())(d)}\r\n                  className='country'\r\n                  fill={`rgb(${red()}, ${green()}, ${blue()})`}\r\n                  stroke='#212121'\r\n                  strokeWidth={0.5}\r\n                />\r\n              )\r\n            })}\r\n          </g>\r\n          <g className='markers'>\r\n            {pastLocations.map((longLat, i) => {\r\n              return (\r\n                <PastLocationMarker\r\n                  key={i}\r\n                  i={i}\r\n                  longLat={longLat}\r\n                  connectedSettings={{ current, selectedProjection, svgSize }}\r\n                />\r\n              )\r\n            })}\r\n            <StationPositionMarker\r\n              connectedSettings={{ current, selectedProjection, svgSize }}\r\n            />\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    current,\r\n    pastLocations,\r\n    selectedProjection,\r\n    svgSize,\r\n    worldData\r\n  } = state\r\n  return {\r\n    current,\r\n    pastLocations,\r\n    selectedProjection,\r\n    svgSize,\r\n    worldData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  getMap,\r\n  setSize,\r\n  loadCurrent\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(WorldMap)\r\n","import { feature } from 'topojson-client'\r\nimport fetchJsonp from 'fetch-jsonp'\r\n// import timeZoneConverter from 'time-zone-converter'\r\n// import timeZone from \"time-zone\"\r\n\r\nexport function getMap() {\r\n  return function(dispatch) {\r\n    fetch('https://unpkg.com/world-atlas@1/world/110m.json')\r\n      .then(response => {\r\n        if (response.status !== 200) {\r\n          console.log(`There was a problem: ${response.status}`)\r\n          return\r\n        }\r\n        response.json().then(worldData => {\r\n          dispatch(\r\n            mapLoaded(feature(worldData, worldData.objects.countries).features)\r\n          )\r\n        })\r\n      })\r\n      .catch(err => console.error('Caught error: ', err))\r\n  }\r\n}\r\n\r\nfunction mapLoaded(data) {\r\n  return {\r\n    type: 'MAP_LOADED',\r\n    value: data\r\n  }\r\n}\r\n\r\nexport function loadCurrent() {\r\n  return function(dispatch) {\r\n    fetchJsonp('//api.open-notify.org/iss-now.json')\r\n      .then(response => {\r\n        console.log('jsonp', response)\r\n        if (!response.ok) {\r\n          console.log('Response not OK.', response)\r\n          return\r\n        }\r\n        response.json().then(res => {\r\n          const current = {\r\n            loaded: true,\r\n            longLat: [\r\n              parseFloat(res.iss_position.longitude),\r\n              parseFloat(res.iss_position.latitude)\r\n            ]\r\n          }\r\n          dispatch(currentLoaded(current))\r\n        })\r\n      })\r\n      .catch(err => console.error('Caught error: ', err))\r\n  }\r\n}\r\n\r\nfunction currentLoaded(coords) {\r\n  return {\r\n    type: 'CURRENT_LOADED',\r\n    value: coords\r\n  }\r\n}\r\n\r\nexport function changeProjection(projection) {\r\n  return {\r\n    type: 'PROJECTION_CHANGED',\r\n    value: projection\r\n  }\r\n}\r\n\r\nexport function setSize(size) {\r\n  return {\r\n    type: 'SIZE_LOADED',\r\n    value: size\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { changeProjection } from '../redux/actions'\r\n\r\nconst ProjectionSelector = props => {\r\n  const buttonDivs = props.allProjections.map((x, i) => {\r\n    return (\r\n      <option key={i} value={x.geo + ',' + x.name}>\r\n        {x.name} Projection\r\n      </option>\r\n    )\r\n  })\r\n  return (\r\n    <select\r\n      onChange={event => {\r\n        const valueArray = event.target.value.split(',')\r\n        return props.changeProjection({\r\n          geo: valueArray[0],\r\n          name: valueArray[1]\r\n        })\r\n      }}\r\n    >\r\n      {buttonDivs}\r\n    </select>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedProjection: state.selectedProjection,\r\n  allProjections: state.allProjections\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeProjection: projection => {\r\n    dispatch(changeProjection(projection))\r\n  }\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ProjectionSelector)\r\n","import React from 'react'\nimport WorldMap from './components/WorldMap'\nimport ProjectionSelector from './components/ProjectionSelector'\n\nfunction App() {\n  return (\n    <main style={{ width: '100vw', height: '100vh' }}>\n      <WorldMap />\n      <div\n        style={{\n          position: 'absolute',\n          top: '2rem',\n          left: '2rem'\n        }}\n      >\n        <h1 style={{ fontSize: '1.2rem' }}>\n          <i>Res Superterram</i> - Things above the Earth\n        </h1>\n        <div style={{ maxWidth: '15rem' }}>\n          <p\n            style={{\n              fontSize: '.8rem',\n              borderRadius: '.25rem',\n              border: '1px solid #f7322e',\n              backgroundColor: 'rgba(247, 50, 46, .25',\n              padding: '.25rem',\n              display: 'flex',\n              justifyContent: 'center'\n            }}\n          >\n            <span role='img' aria-label='construction sign'>\n              🚧\n            </span>\n            <code>&nbsp;app under construction!&nbsp;</code>\n            <span role='img' aria-label='construction sign'>\n              🚧\n            </span>\n          </p>\n          <p>\n            This map displays the current location of the International Space\n            Station in real time, thanks to&nbsp;\n            <a\n              href='http://open-notify.org/'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              Open Notify\n            </a>\n            .\n          </p>\n          <p>\n            The location is updated every 5 seconds. Watch long enough and\n            you'll see the orbital path of the ISS drawn across the map! Try\n            viewing different projections to see how the path appears to change.\n          </p>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column'\n            }}\n          >\n            <ProjectionSelector />\n          </div>\n        </div>\n      </div>\n    </main>\n  )\n}\n\nexport default App\n","import { combineReducers } from 'redux'\r\n\r\nfunction svgSize(state = [800, 450], action) {\r\n  if (action.type === 'SIZE_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction flyover(state = {}, action) {\r\n  if (action.type === 'FLYOVER_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction inputLat(state = '', action) {\r\n  if (action.type === 'LAT_UPDATED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction inputLong(state = '', action) {\r\n  if (action.type === 'LONG_UPDATED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction buttons(state = [], action) {\r\n  if (action.type === 'BUTTONS_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction worldData(state = [], action) {\r\n  if (action.type === 'MAP_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction current(state = {}, action) {\r\n  if (action.type === 'CURRENT_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction selectedProjection(state = {}, action) {\r\n  if (action.type === 'PROJECTION_CHANGED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction allProjections(state = []) {\r\n  return state\r\n}\r\n\r\nfunction cities(state = []) {\r\n  return state\r\n}\r\n\r\nfunction pastLocations(state = [], action) {\r\n  if (action.type === 'CURRENT_LOADED') {\r\n    state.unshift(action.value.longLat)\r\n  }\r\n  return state\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  allProjections,\r\n  buttons,\r\n  cities,\r\n  current,\r\n  flyover,\r\n  inputLat,\r\n  inputLong,\r\n  pastLocations,\r\n  selectedProjection,\r\n  svgSize,\r\n  worldData\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, createStore, compose } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport preloadedState from './redux/state'\nimport rootReducer from './redux/reducers'\n\nimport './index.css'\n\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\nconst composedEnhancers = compose(middlewareEnhancer)\n\nconst store = createStore(rootReducer, preloadedState, composedEnhancers)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\nserviceWorker.unregister()\n","export default {\r\n  current: {},\r\n  pastLocations: [],\r\n  worldData: [],\r\n  svgSize: [800, 450],\r\n  selectedProjection: {\r\n    geo: 'geoMercator',\r\n    name: 'Mercator',\r\n    desc: ''\r\n  },\r\n  allProjections: [\r\n    {\r\n      geo: 'geoMercator',\r\n      name: 'Mercator',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoNaturalEarth1',\r\n      name: 'Natural Earth',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoHill',\r\n      name: 'Hill Eucyclic',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoAzimuthalEqualArea',\r\n      name: 'Azimuthal',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoOrthographic',\r\n      name: 'Orthographic',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoConicEqualArea',\r\n      name: 'Conic',\r\n      desc: ''\r\n    }\r\n  ],\r\n  flyover: {},\r\n  inputLat: '',\r\n  inputLong: '',\r\n  buttons: [\r\n    {\r\n      name: 'São Paulo',\r\n      timezone: -2,\r\n      lat: -23.55,\r\n      long: -46.633333,\r\n      country: 'Brazil'\r\n    },\r\n    {\r\n      name: 'Lagos',\r\n      timezone: 1,\r\n      lat: 6.455027,\r\n      long: 3.384082,\r\n      country: 'Nigeria'\r\n    },\r\n    {\r\n      name: 'Dhaka',\r\n      timezone: 6,\r\n      lat: 23.7,\r\n      long: 90.366667,\r\n      country: 'Bangladesh'\r\n    },\r\n    {\r\n      name: 'Beijing',\r\n      timezone: 8,\r\n      lat: 39.916667,\r\n      long: 116.383333,\r\n      country: 'China'\r\n    },\r\n    {\r\n      name: 'New York',\r\n      timezone: -5,\r\n      lat: 40.7127,\r\n      long: -74.0059,\r\n      country: 'USA'\r\n    },\r\n    {\r\n      name: 'Moscow',\r\n      timezone: 3,\r\n      lat: 55.75,\r\n      long: 37.616667,\r\n      country: 'Russia'\r\n    }\r\n  ]\r\n}\r\n"],"sourceRoot":""}