{"version":3,"sources":["serviceWorker.js","helpers/index.js","components/MapMarker.js","components/StationPositionMarker.js","components/PastLocationMarker.js","components/WorldMap.js","redux/actions.js","components/ChangeProjectionButtons.js","App.js","redux/reducers.js","index.js","redux/state.js"],"names":["Boolean","window","location","hostname","match","renderProjection","projection","longLat","width","height","long","geoOrthographic","scale","translate","rotate","x","findRotationCoords","geoNaturalEarth1","geoAzimuthalEqualArea","geoHill","geoMercator","geoConicEqualArea","Marker","this","props","svgSize","circleProps","current","loaded","geo","selectedProjection","coords","cx","cy","r","radius","fill","stroke","className","Component","connect","state","MapMarker","circle","WorldMap","innerHeight","setSize","getMap","loadCurrent","setInterval","pastLocations","worldData","style","display","justifyContent","alignItems","viewBox","map","d","i","divisibleBy","key","geoPath","strokeWidth","last","length","StationPositionMarker","mapDispatchToProps","dispatch","fetch","then","response","status","json","type","value","feature","objects","countries","features","console","log","catch","err","error","size","res","parseFloat","iss_position","longitude","latitude","allProjections","changeProjection","buttonDivs","name","onChange","event","valueArray","target","split","App","position","top","left","fontSize","maxWidth","role","aria-label","href","rel","flexDirection","rootReducer","combineReducers","buttons","action","cities","flyover","inputLat","inputLong","push","middlewareEnhancer","applyMiddleware","thunkMiddleware","composedEnhancers","compose","store","createStore","desc","timezone","lat","country","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29c2a572.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  geoConicEqualArea,\r\n  geoMercator,\r\n  geoNaturalEarth1,\r\n  geoAzimuthalEqualArea,\r\n  geoOrthographic\r\n} from 'd3-geo'\r\nimport { geoHill } from 'd3-geo-projection'\r\n\r\nexport const renderProjection = (projection, longLat, width, height) => {\r\n  switch (projection) {\r\n    case 'geoOrthographic': {\r\n      const findRotationCoords = x => {\r\n        if (x) {\r\n          if (x < -45) return [90, 0]\r\n          if (x > 45 && x < 135) return [-90, 0]\r\n          if (x >= 135) return [-180, 0]\r\n        }\r\n        return [0, 0]\r\n      }\r\n      const long = longLat ? longLat[0] : 0\r\n      return geoOrthographic()\r\n        .scale(200)\r\n        .translate([width / 2, height / 2])\r\n        .rotate(findRotationCoords(long))\r\n    }\r\n    case 'geoNaturalEarth1': {\r\n      return geoNaturalEarth1()\r\n        .scale(150)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    case 'geoAzimuthalEqualArea': {\r\n      return geoAzimuthalEqualArea()\r\n        .scale(110)\r\n        .translate([width / 2, height / 2])\r\n        .rotate([0, -90])\r\n    }\r\n    case 'geoHill': {\r\n      return geoHill()\r\n        .scale(150)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    case 'geoMercator': {\r\n      return geoMercator()\r\n        .scale(75)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    case 'geoConicEqualArea': {\r\n      return geoConicEqualArea()\r\n        .scale(125)\r\n        .translate([width / 2, height / 2])\r\n    }\r\n    default: {\r\n      return null\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { renderProjection } from '../helpers'\r\n\r\nclass Marker extends Component {\r\n  render() {\r\n    const { svgSize, circleProps } = this.props\r\n    const { longLat, loaded } = this.props.current\r\n    const { geo } = this.props.selectedProjection\r\n    if (loaded) {\r\n      const coords = renderProjection(geo, longLat, svgSize[0], svgSize[1])\r\n      return (\r\n        <circle\r\n          cx={coords(longLat)[0]}\r\n          cy={coords(longLat)[1]}\r\n          r={circleProps.radius}\r\n          fill={circleProps.fill}\r\n          stroke={circleProps.stroke}\r\n          className='marker'\r\n        />\r\n      )\r\n    } else return null\r\n  }\r\n}\r\n\r\nexport default Marker\r\n","import { connect } from 'react-redux'\r\nimport React from 'react'\r\nimport MapMarker from './MapMarker'\r\n\r\nconst StationMarker = props => {\r\n  const circle = {\r\n    radius: 5,\r\n    fill: 'rgba(50, 250, 250, .3)',\r\n    stroke: '#212121'\r\n  }\r\n  return (\r\n    <MapMarker\r\n      svgSize={props.svgSize}\r\n      current={props.current}\r\n      selectedProjection={props.selectedProjection}\r\n      circleProps={circle}\r\n    />\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  current: state.current,\r\n  selectedProjection: state.selectedProjection,\r\n  svgSize: state.svgSize\r\n})\r\n\r\nexport default connect(mapStateToProps)(StationMarker)\r\n","import { connect } from 'react-redux'\r\nimport React from 'react'\r\nimport MapMarker from './MapMarker'\r\n\r\nconst PastLocationMarker = props => {\r\n  const { longLat, selectedProjection, stroke, svgSize } = props\r\n  const circle = {\r\n    radius: 1,\r\n    fill: 'rgba(100, 250, 250, .85)',\r\n    stroke: stroke || 'none'\r\n  }\r\n  return (\r\n    <MapMarker\r\n      svgSize={svgSize}\r\n      current={{ loaded: true, longLat }}\r\n      selectedProjection={selectedProjection}\r\n      circleProps={circle}\r\n    />\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedProjection: state.selectedProjection,\r\n  svgSize: state.svgSize\r\n})\r\n\r\nexport default connect(mapStateToProps)(PastLocationMarker)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { geoPath } from 'd3-geo'\r\n\r\nimport StationPositionMarker from './StationPositionMarker'\r\nimport PastLocationMarker from './PastLocationMarker'\r\nimport { renderProjection } from '../helpers'\r\n\r\nimport { getMap, loadCurrent, setSize } from '../redux/actions'\r\n\r\nclass WorldMap extends Component {\r\n  height = window.innerHeight * 0.8\r\n  width = this.height * 1.78\r\n\r\n  componentDidMount() {\r\n    this.props.setSize([this.width, this.height])\r\n    this.props.getMap()\r\n    this.props.loadCurrent()\r\n    setInterval(this.props.loadCurrent, 10000)\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      current,\r\n      pastLocations,\r\n      selectedProjection,\r\n      svgSize,\r\n      worldData\r\n    } = this.props\r\n\r\n    const currentProjection = () =>\r\n      renderProjection(\r\n        selectedProjection.geo,\r\n        current.longLat,\r\n        svgSize[0],\r\n        svgSize[1]\r\n      )\r\n    return (\r\n      <div\r\n        style={{\r\n          width: '100%',\r\n          height: '100%',\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center'\r\n        }}\r\n      >\r\n        <svg\r\n          width={svgSize[0]}\r\n          height={svgSize[1]}\r\n          viewBox={`0 0 ${svgSize[0]} ${svgSize[1]}`}\r\n        >\r\n          <g className='countries'>\r\n            {worldData.map((d, i) => {\r\n              const divisibleBy = x => {\r\n                return i % x === 0\r\n              }\r\n              const red = () => 250\r\n              const green = () => {\r\n                if (divisibleBy(7)) return 150\r\n                if (divisibleBy(5)) return 220\r\n                if (divisibleBy(3)) return 100 + i\r\n                return 180 - i / 2\r\n              }\r\n              const blue = () => {\r\n                if (divisibleBy(8)) return 150\r\n                if (divisibleBy(6)) return 200\r\n                if (divisibleBy(4)) return i + i / 2\r\n                if (divisibleBy(2)) return 180 - i / 2\r\n                return 100 + i / 2\r\n              }\r\n\r\n              return (\r\n                <path\r\n                  key={`path_${i}`}\r\n                  d={geoPath().projection(currentProjection())(d)}\r\n                  className='country'\r\n                  fill={`rgb(${red()}, ${green()}, ${blue()})`}\r\n                  stroke='#212121'\r\n                  strokeWidth={0.5}\r\n                />\r\n              )\r\n            })}\r\n          </g>\r\n          <g className='markers'>\r\n            {pastLocations.map((coords, i) => {\r\n              const last = i === pastLocations.length - 1\r\n              return (\r\n                <PastLocationMarker\r\n                  longLat={coords}\r\n                  stroke={last && '#212121'}\r\n                />\r\n              )\r\n            })}\r\n            <StationPositionMarker />\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    current,\r\n    pastLocations,\r\n    selectedProjection,\r\n    svgSize,\r\n    worldData\r\n  } = state\r\n  return {\r\n    current,\r\n    pastLocations,\r\n    selectedProjection,\r\n    svgSize,\r\n    worldData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  getMap,\r\n  setSize,\r\n  loadCurrent\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(WorldMap)\r\n","import { feature } from 'topojson-client'\r\n// import timeZoneConverter from 'time-zone-converter'\r\n// import timeZone from \"time-zone\"\r\n\r\nexport function getMap() {\r\n  return function(dispatch) {\r\n    fetch('https://unpkg.com/world-atlas@1/world/110m.json')\r\n      .then(response => {\r\n        if (response.status !== 200) {\r\n          console.log(`There was a problem: ${response.status}`)\r\n          return\r\n        }\r\n        response.json().then(worldData => {\r\n          dispatch(\r\n            mapLoaded(feature(worldData, worldData.objects.countries).features)\r\n          )\r\n        })\r\n      })\r\n      .catch(err => console.error('Caught error: ', err))\r\n  }\r\n}\r\n\r\nfunction mapLoaded(data) {\r\n  return {\r\n    type: 'MAP_LOADED',\r\n    value: data\r\n  }\r\n}\r\n\r\nexport function loadCurrent() {\r\n  return function(dispatch) {\r\n    fetch('http://api.open-notify.org/iss-now.json')\r\n      .then(response => {\r\n        if (response.status !== 200) {\r\n          console.log(`There was a problem: ${response.status}`)\r\n          return\r\n        }\r\n        response.json().then(res => {\r\n          const current = {\r\n            loaded: true,\r\n            longLat: [\r\n              parseFloat(res.iss_position.longitude),\r\n              parseFloat(res.iss_position.latitude)\r\n            ]\r\n          }\r\n          dispatch(currentLoaded(current))\r\n        })\r\n      })\r\n      .catch(err => console.error('Caught error: ', err))\r\n  }\r\n}\r\n\r\nfunction currentLoaded(coords) {\r\n  return {\r\n    type: 'CURRENT_LOADED',\r\n    value: coords\r\n  }\r\n}\r\n\r\nexport function changeProjection(projection) {\r\n  return {\r\n    type: 'PROJECTION_CHANGED',\r\n    value: projection\r\n  }\r\n}\r\n\r\nexport function setSize(size) {\r\n  return {\r\n    type: 'SIZE_LOADED',\r\n    value: size\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { changeProjection } from '../redux/actions'\r\n\r\nconst ChangeProjectionButtons = props => {\r\n  const buttonDivs = props.allProjections.map((x, i) => {\r\n    return (\r\n      <option key={i} value={x.geo + ',' + x.name}>\r\n        {x.name} Projection\r\n      </option>\r\n    )\r\n  })\r\n  return (\r\n    <select\r\n      onChange={event => {\r\n        const valueArray = event.target.value.split(',')\r\n        return props.changeProjection({\r\n          geo: valueArray[0],\r\n          name: valueArray[1]\r\n        })\r\n      }}\r\n    >\r\n      {buttonDivs}\r\n    </select>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedProjection: state.selectedProjection,\r\n  allProjections: state.allProjections\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeProjection: projection => {\r\n    dispatch(changeProjection(projection))\r\n  }\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ChangeProjectionButtons)\r\n","import React from 'react'\nimport WorldMap from './components/WorldMap'\nimport ChangeProjectionButtons from './components/ChangeProjectionButtons'\n\nfunction App() {\n  return (\n    <main style={{ width: '100vw', height: '100vh' }}>\n      <WorldMap />\n      <div\n        style={{\n          position: 'absolute',\n          top: '2rem',\n          left: '2rem'\n        }}\n      >\n        <h1 style={{ fontSize: '1.2rem' }}>\n          <i>Res Superterram</i> - Things above the Earth\n        </h1>\n        <div style={{ maxWidth: '15rem' }}>\n          <p style={{ fontSize: '.8rem' }}>\n            <span role='img' aria-label='construction sign'>\n              🚧\n            </span>\n            <code>app under construction!</code>\n            <span role='img' aria-label='construction sign'>\n              🚧\n            </span>\n          </p>\n          <p>\n            This map displays the current location of the International Space\n            Station in real time, thanks to&nbsp;\n            <a\n              href='http://open-notify.org/'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              Open Notify\n            </a>\n            .\n          </p>\n          <p>\n            The location will update every 10 seconds and will draw a line\n            across the map. Try viewing different projections to see how the\n            path of the ISS appears to change.\n          </p>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column'\n            }}\n          >\n            <ChangeProjectionButtons />\n          </div>\n        </div>\n      </div>\n    </main>\n  )\n}\n\nexport default App\n","import { combineReducers } from 'redux'\r\n\r\nfunction svgSize(state = [800, 450], action) {\r\n  if (action.type === 'SIZE_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction flyover(state = {}, action) {\r\n  if (action.type === 'FLYOVER_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction inputLat(state = '', action) {\r\n  if (action.type === 'LAT_UPDATED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction inputLong(state = '', action) {\r\n  if (action.type === 'LONG_UPDATED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction buttons(state = [], action) {\r\n  if (action.type === 'BUTTONS_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction worldData(state = [], action) {\r\n  if (action.type === 'MAP_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction current(state = {}, action) {\r\n  if (action.type === 'CURRENT_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction selectedProjection(state = {}, action) {\r\n  if (action.type === 'PROJECTION_CHANGED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction allProjections(state = []) {\r\n  return state\r\n}\r\n\r\nfunction cities(state = []) {\r\n  return state\r\n}\r\n\r\nfunction pastLocations(state = [], action) {\r\n  if (action.type === 'CURRENT_LOADED') {\r\n    state.push(action.value.longLat)\r\n  }\r\n  return state\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  allProjections,\r\n  buttons,\r\n  cities,\r\n  current,\r\n  flyover,\r\n  inputLat,\r\n  inputLong,\r\n  pastLocations,\r\n  selectedProjection,\r\n  svgSize,\r\n  worldData\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, createStore, compose } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport preloadedState from './redux/state'\nimport rootReducer from './redux/reducers'\n\nimport './index.css'\n\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\nconst composedEnhancers = compose(middlewareEnhancer)\n\nconst store = createStore(rootReducer, preloadedState, composedEnhancers)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\nserviceWorker.unregister()\n","export default {\r\n  current: {},\r\n  pastLocations: [],\r\n  worldData: [],\r\n  svgSize: [800, 450],\r\n  selectedProjection: {\r\n    geo: 'geoMercator',\r\n    name: 'Mercator',\r\n    desc: ''\r\n  },\r\n  allProjections: [\r\n    {\r\n      geo: 'geoMercator',\r\n      name: 'Mercator',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoNaturalEarth1',\r\n      name: 'Natural Earth',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoHill',\r\n      name: 'Hill Eucyclic',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoAzimuthalEqualArea',\r\n      name: 'Azimuthal',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoOrthographic',\r\n      name: 'Orthographic',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoConicEqualArea',\r\n      name: 'Conic',\r\n      desc: ''\r\n    }\r\n  ],\r\n  flyover: {},\r\n  inputLat: '',\r\n  inputLong: '',\r\n  buttons: [\r\n    {\r\n      name: 'São Paulo',\r\n      timezone: -2,\r\n      lat: -23.55,\r\n      long: -46.633333,\r\n      country: 'Brazil'\r\n    },\r\n    {\r\n      name: 'Lagos',\r\n      timezone: 1,\r\n      lat: 6.455027,\r\n      long: 3.384082,\r\n      country: 'Nigeria'\r\n    },\r\n    {\r\n      name: 'Dhaka',\r\n      timezone: 6,\r\n      lat: 23.7,\r\n      long: 90.366667,\r\n      country: 'Bangladesh'\r\n    },\r\n    {\r\n      name: 'Beijing',\r\n      timezone: 8,\r\n      lat: 39.916667,\r\n      long: 116.383333,\r\n      country: 'China'\r\n    },\r\n    {\r\n      name: 'New York',\r\n      timezone: -5,\r\n      lat: 40.7127,\r\n      long: -74.0059,\r\n      country: 'USA'\r\n    },\r\n    {\r\n      name: 'Moscow',\r\n      timezone: 3,\r\n      lat: 55.75,\r\n      long: 37.616667,\r\n      country: 'Russia'\r\n    }\r\n  ]\r\n}\r\n"],"sourceRoot":""}