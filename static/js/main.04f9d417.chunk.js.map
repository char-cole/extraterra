{"version":3,"sources":["serviceWorker.js","helpers/index.js","components/StationPositionMarker.js","components/WorldMap.js","redux/actions.js","components/ChangeProjectionButtons.js","App.js","redux/reducers.js","index.js","redux/state.js"],"names":["Boolean","window","location","hostname","match","renderProjection","projection","longLat","geoOrthographic","scale","translate","rotate","x","findRotationCoords","geoNaturalEarth1","geoAzimuthalEqualArea","geoHill","geoMercator","geoConicEqualArea","Marker","this","props","current","loaded","geo","selectedProjection","coords","cx","cy","r","fill","className","Component","connect","state","WorldMap","getMap","loadCurrent","worldData","currentProjection","onClick","width","height","viewBox","map","d","i","key","geoPath","length","stroke","strokeWidth","StationPositionMarker","mapDispatchToProps","dispatch","fetch","then","response","status","json","type","value","feature","objects","countries","features","console","log","catch","err","error","res","parseFloat","iss_position","longitude","latitude","allProjections","changeProjection","buttonDivs","name","style","display","flexDirection","App","maxWidth","margin","rootReducer","combineReducers","flyover","action","inputLat","inputLong","buttons","cities","middlewareEnhancer","applyMiddleware","thunkMiddleware","composedEnhancers","compose","store","createStore","desc","timezone","lat","long","country","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04f9d417.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  geoConicEqualArea,\r\n  geoMercator,\r\n  geoNaturalEarth1,\r\n  geoAzimuthalEqualArea,\r\n  geoOrthographic\r\n} from 'd3-geo'\r\nimport { geoHill } from 'd3-geo-projection'\r\n\r\nexport const renderProjection = (projection, longLat) => {\r\n  const findRotationCoords = x => {\r\n    if (x) {\r\n      if (x < -45) return [90, 0]\r\n      if (x > 45 && x < 135) return [-90, 0]\r\n      if (x >= 135) return [-180, 0]\r\n    }\r\n    return [0, 0]\r\n  }\r\n  switch (projection) {\r\n    case 'geoOrthographic': {\r\n      return geoOrthographic()\r\n        .scale(200)\r\n        .translate([800 / 2, 450 / 2])\r\n        .rotate(findRotationCoords(longLat[0] || 0))\r\n    }\r\n    case 'geoNaturalEarth1': {\r\n      return geoNaturalEarth1()\r\n        .scale(100)\r\n        .translate([800 / 2, 450 / 2])\r\n    }\r\n    case 'geoAzimuthalEqualArea': {\r\n      return geoAzimuthalEqualArea()\r\n        .scale(100)\r\n        .translate([800 / 2, 450 / 2])\r\n        .rotate([0, -90])\r\n    }\r\n    case 'geoHill': {\r\n      return geoHill()\r\n        .scale(100)\r\n        .translate([800 / 2, 450 / 2])\r\n    }\r\n    case 'geoMercator': {\r\n      return geoMercator()\r\n        .scale(100)\r\n        .translate([800 / 2, 450 / 2])\r\n    }\r\n    case 'geoConicEqualArea': {\r\n      return geoConicEqualArea()\r\n        .scale(100)\r\n        .translate([800 / 2, 450 / 2])\r\n    }\r\n    default: {\r\n      return null\r\n    }\r\n  }\r\n}\r\n","import { connect } from 'react-redux'\r\nimport React, { Component } from 'react'\r\nimport { renderProjection } from '../helpers'\r\n\r\nclass Marker extends Component {\r\n  render() {\r\n    const { longLat, loaded } = this.props.current\r\n    const { geo } = this.props.selectedProjection\r\n    if (loaded) {\r\n      const coords = renderProjection(geo, longLat)\r\n      return (\r\n        <circle\r\n          cx={coords(longLat)[0]}\r\n          cy={coords(longLat)[1]}\r\n          r={5}\r\n          fill='#E91E63'\r\n          className='marker'\r\n        />\r\n      )\r\n    } else return null\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  current: state.current,\r\n  selectedProjection: state.selectedProjection\r\n})\r\n\r\nexport default connect(mapStateToProps)(Marker)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { geoPath } from 'd3-geo'\r\n\r\nimport StationPositionMarker from './StationPositionMarker'\r\nimport { renderProjection } from '../helpers'\r\n\r\nimport { getMap, loadCurrent } from '../redux/actions'\r\n\r\nclass WorldMap extends Component {\r\n  componentDidMount() {\r\n    this.props.getMap()\r\n    this.props.loadCurrent()\r\n  }\r\n\r\n  render() {\r\n    const { current, selectedProjection, worldData, loadCurrent } = this.props\r\n    const currentProjection = renderProjection(\r\n      selectedProjection.geo,\r\n      current.longLat\r\n    )\r\n    return (\r\n      <div onClick={() => loadCurrent()}>\r\n        <svg width={800} height={450} viewBox='0 0 800 450'>\r\n          <g className='countries'>\r\n            {worldData.map((d, i) => (\r\n              <path\r\n                key={`path-${i}`}\r\n                d={geoPath().projection(currentProjection)(d)}\r\n                className='country'\r\n                fill={`rgba(38,250,56,${(1 / worldData.length) * i + 0.1})`}\r\n                stroke='#FFFFFF'\r\n                strokeWidth={0.5}\r\n              />\r\n            ))}\r\n          </g>\r\n          <g className='markers'>\r\n            <StationPositionMarker />\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const { current, selectedProjection, worldData } = state\r\n  return {\r\n    current,\r\n    selectedProjection,\r\n    worldData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  getMap,\r\n  loadCurrent\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(WorldMap)\r\n","import { feature } from 'topojson-client'\r\n// import timeZoneConverter from 'time-zone-converter'\r\n// import timeZone from \"time-zone\"\r\n\r\nexport function getMap() {\r\n  return function(dispatch) {\r\n    fetch('https://unpkg.com/world-atlas@1/world/110m.json')\r\n      .then(response => {\r\n        if (response.status !== 200) {\r\n          console.log(`There was a problem: ${response.status}`)\r\n          return\r\n        }\r\n        response.json().then(worldData => {\r\n          dispatch(\r\n            mapLoaded(feature(worldData, worldData.objects.countries).features)\r\n          )\r\n        })\r\n      })\r\n      .catch(err => console.error('Caught error: ', err))\r\n  }\r\n}\r\n\r\nfunction mapLoaded(data) {\r\n  return {\r\n    type: 'MAP_LOADED',\r\n    value: data\r\n  }\r\n}\r\n\r\nexport function loadCurrent() {\r\n  return function(dispatch) {\r\n    fetch('http://api.open-notify.org/iss-now.json')\r\n      .then(response => {\r\n        if (response.status !== 200) {\r\n          console.log(`There was a problem: ${response.status}`)\r\n          return\r\n        }\r\n        response.json().then(res => {\r\n          const current = {\r\n            loaded: true,\r\n            longLat: [\r\n              parseFloat(res.iss_position.longitude),\r\n              parseFloat(res.iss_position.latitude)\r\n            ]\r\n          }\r\n          dispatch(currentLoaded(current))\r\n        })\r\n      })\r\n      .catch(err => console.error('Caught error: ', err))\r\n  }\r\n}\r\n\r\nfunction currentLoaded(coords) {\r\n  return {\r\n    type: 'CURRENT_LOADED',\r\n    value: coords\r\n  }\r\n}\r\n\r\nexport function changeProjection(projection) {\r\n  return {\r\n    type: 'PROJECTION_CHANGED',\r\n    value: projection\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { changeProjection } from '../redux/actions'\r\n\r\nconst ChangeProjectionButtons = props => {\r\n  const buttonDivs = props.allProjections.map((x, i) => {\r\n    if (x.geo !== props.selectedProjection.geo) {\r\n      return (\r\n        <button\r\n          key={i}\r\n          onClick={() => {\r\n            return props.changeProjection(x)\r\n          }}\r\n        >\r\n          {x.name} Projection\r\n        </button>\r\n      )\r\n    } else return null\r\n  })\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column' }}>{buttonDivs}</div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedProjection: state.selectedProjection,\r\n  allProjections: state.allProjections\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeProjection: projection => {\r\n    dispatch(changeProjection(projection))\r\n  }\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ChangeProjectionButtons)\r\n","import React from 'react'\nimport WorldMap from './components/WorldMap'\nimport ChangeProjectionButtons from './components/ChangeProjectionButtons'\n\nfunction App() {\n  return (\n    <main style={{ maxWidth: '1200px', margin: '0 auto' }}>\n      <p>just a little lorem ipsum for you</p>\n      <div style={{ display: 'flex' }}>\n        <ChangeProjectionButtons />\n        <WorldMap />\n      </div>\n    </main>\n  )\n}\n\nexport default App\n","import { combineReducers } from 'redux'\r\n\r\nfunction flyover(state = {}, action) {\r\n  if (action.type === 'FLYOVER_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction inputLat(state = '', action) {\r\n  if (action.type === 'LAT_UPDATED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction inputLong(state = '', action) {\r\n  if (action.type === 'LONG_UPDATED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction buttons(state = [], action) {\r\n  if (action.type === 'BUTTONS_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction worldData(state = [], action) {\r\n  if (action.type === 'MAP_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction current(state = {}, action) {\r\n  if (action.type === 'CURRENT_LOADED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction selectedProjection(state = {}, action) {\r\n  if (action.type === 'PROJECTION_CHANGED') {\r\n    return action.value\r\n  }\r\n  return state\r\n}\r\n\r\nfunction allProjections(state = [], action) {\r\n  return state\r\n}\r\n\r\nfunction cities(state = [], action) {\r\n  return state\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  flyover,\r\n  inputLat,\r\n  inputLong,\r\n  buttons,\r\n  worldData,\r\n  current,\r\n  selectedProjection,\r\n  allProjections,\r\n  cities\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, createStore, compose } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport preloadedState from './redux/state'\nimport rootReducer from './redux/reducers'\n\nimport './index.css'\n\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\nconst composedEnhancers = compose(middlewareEnhancer)\n\nconst store = createStore(rootReducer, preloadedState, composedEnhancers)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\nserviceWorker.unregister()\n","export default {\r\n  current: {},\r\n  worldData: [],\r\n  selectedProjection: {\r\n    geo: 'geoMercator',\r\n    name: 'Mercator',\r\n    desc: ''\r\n  },\r\n  allProjections: [\r\n    {\r\n      geo: 'geoMercator',\r\n      name: 'Mercator',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoNaturalEarth1',\r\n      name: 'Natural Earth',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoHill',\r\n      name: 'Hill Eucyclic',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoAzimuthalEqualArea',\r\n      name: 'Azimuthal',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoOrthographic',\r\n      name: 'Orthographic',\r\n      desc: ''\r\n    },\r\n    {\r\n      geo: 'geoConicEqualArea',\r\n      name: 'Conic',\r\n      desc: ''\r\n    }\r\n  ],\r\n  flyover: {},\r\n  inputLat: '',\r\n  inputLong: '',\r\n  buttons: [\r\n    {\r\n      name: 'São Paulo',\r\n      timezone: -2,\r\n      lat: -23.55,\r\n      long: -46.633333,\r\n      country: 'Brazil'\r\n    },\r\n    {\r\n      name: 'Lagos',\r\n      timezone: 1,\r\n      lat: 6.455027,\r\n      long: 3.384082,\r\n      country: 'Nigeria'\r\n    },\r\n    {\r\n      name: 'Dhaka',\r\n      timezone: 6,\r\n      lat: 23.7,\r\n      long: 90.366667,\r\n      country: 'Bangladesh'\r\n    },\r\n    {\r\n      name: 'Beijing',\r\n      timezone: 8,\r\n      lat: 39.916667,\r\n      long: 116.383333,\r\n      country: 'China'\r\n    },\r\n    {\r\n      name: 'New York',\r\n      timezone: -5,\r\n      lat: 40.7127,\r\n      long: -74.0059,\r\n      country: 'USA'\r\n    },\r\n    {\r\n      name: 'Moscow',\r\n      timezone: 3,\r\n      lat: 55.75,\r\n      long: 37.616667,\r\n      country: 'Russia'\r\n    }\r\n  ]\r\n}\r\n"],"sourceRoot":""}